package us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.2.5
 * 2018-07-12T14:34:55.056-05:00
 * Generated source version: 3.2.5
 *
 */
@WebService(targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", name = "CredentialPort")
@XmlSeeAlso({ObjectFactory.class, us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.pacs.ObjectFactory.class})
public interface CredentialPort {

    /**
     * This method returns all the supported format types of a specified identifier type that is supported by
     * 				the device.
     * 			
     */
    @WebMethod(operationName = "GetSupportedFormatTypes", action = "http://www.onvif.org/ver10/credential/wsdl/GetSupportedFormatTypes")
    @RequestWrapper(localName = "GetSupportedFormatTypes", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetSupportedFormatTypes")
    @ResponseWrapper(localName = "GetSupportedFormatTypesResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetSupportedFormatTypesResponse")
    @WebResult(name = "FormatTypeInfo", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    java.util.List<us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialIdentifierFormatTypeInfo> getSupportedFormatTypes(
            @WebParam(name = "CredentialIdentifierTypeName", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialIdentifierTypeName
    );

    /**
     * This operation returns the specified credential items matching the given tokens.
     * 				The device shall ignore tokens it cannot resolve and shall return an empty list if there are no items
     * 				matching specified tokens. The device shall not return a fault in this case.
     * 				If the number of requested items is greater than MaxLimit, a TooManyItems fault shall be returned.
     * 			
     */
    @WebMethod(operationName = "GetCredentials", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentials")
    @RequestWrapper(localName = "GetCredentials", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentials")
    @ResponseWrapper(localName = "GetCredentialsResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialsResponse")
    @WebResult(name = "Credential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    java.util.List<Credential> getCredentials(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    java.util.List<String> token
    );

    /**
     * This method returns all the credential access profiles for a credential.
     * 			
     */
    @WebMethod(operationName = "GetCredentialAccessProfiles", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialAccessProfiles")
    @RequestWrapper(localName = "GetCredentialAccessProfiles", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialAccessProfiles")
    @ResponseWrapper(localName = "GetCredentialAccessProfilesResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialAccessProfilesResponse")
    @WebResult(name = "CredentialAccessProfile", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    java.util.List<us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialAccessProfile> getCredentialAccessProfiles(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken
    );

    /**
     * This operation requests a list of all credential items provided by the device.
     * 				A call to this method shall return a StartReference when not all data is returned and more data is
     * 				available. The reference shall be valid for retrieving the next set of data. Please refer section 4.8.3
     * 				in [Access Control Service Specification] for more details. The number of items returned shall not be
     * 				greater the Limit parameter.
     * 			
     */
    @WebMethod(operationName = "GetCredentialList", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialList")
    @RequestWrapper(localName = "GetCredentialList", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialList")
    @ResponseWrapper(localName = "GetCredentialListResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialListResponse")
    void getCredentialList(
            @WebParam(name = "Limit", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    Integer limit,
            @WebParam(name = "StartReference", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String startReference,
            @WebParam(mode = WebParam.Mode.OUT, name = "NextStartReference", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    javax.xml.ws.Holder<String> nextStartReference,
            @WebParam(mode = WebParam.Mode.OUT, name = "Credential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    javax.xml.ws.Holder<java.util.List<Credential>> credential
    );

    /**
     * This method is used to synchronize a credential in a client with the device.
     * 			
     */
    @WebMethod(operationName = "SetCredential", action = "http://www.onvif.org/ver10/credential/wsdl/SetCredential")
    @RequestWrapper(localName = "SetCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredential")
    @ResponseWrapper(localName = "SetCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredentialResponse")
    void setCredential(
            @WebParam(name = "CredentialData", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    CredentialData credentialData
    );

    /**
     * This operation returns the capabilities of the credential service.
     */
    @WebMethod(operationName = "GetServiceCapabilities", action = "http://www.onvif.org/ver10/credential/wsdl/GetServiceCapabilities")
    @RequestWrapper(localName = "GetServiceCapabilities", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetServiceCapabilities")
    @ResponseWrapper(localName = "GetServiceCapabilitiesResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetServiceCapabilitiesResponse")
    @WebResult(name = "Capabilities", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.ServiceCapabilities getServiceCapabilities();

    /**
     * This operation requests a list of all CredentialInfo items provided by the device.
     * A call to this method shall return a StartReference when not all data is returned and more data is available.
     * The reference shall be valid for retrieving the next set of data. Please refer to section 4.8.3 in 
     * [ONVIF Access Control Service Specification] for more details.
     * The number of items returned shall not be greater than the Limit parameter.
     *       
     */
    @WebMethod(operationName = "GetCredentialInfoList", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialInfoList")
    @RequestWrapper(localName = "GetCredentialInfoList", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialInfoList")
    @ResponseWrapper(localName = "GetCredentialInfoListResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialInfoListResponse")
    void getCredentialInfoList(
            @WebParam(name = "Limit", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    Integer limit,
            @WebParam(name = "StartReference", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String startReference,
            @WebParam(mode = WebParam.Mode.OUT, name = "NextStartReference", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    javax.xml.ws.Holder<String> nextStartReference,
            @WebParam(mode = WebParam.Mode.OUT, name = "CredentialInfo", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    javax.xml.ws.Holder<java.util.List<CredentialInfo>> credentialInfo
    );

    /**
     * This method returns the state for the specified credential.
     * 				If the capability ResetAntipassbackSupported is set to true, then the device shall supply the
     * 				anti-passback state in the returned credential state structure.
     * 			
     */
    @WebMethod(operationName = "GetCredentialState", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialState")
    @RequestWrapper(localName = "GetCredentialState", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialState")
    @ResponseWrapper(localName = "GetCredentialStateResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialStateResponse")
    @WebResult(name = "State", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialState getCredentialState(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String token
    );

    /**
     * This method deletes all the credential access profiles for the specified tokens.
     * 				However, if no matching credential access profiles are found, the corresponding access profile tokens
     * 				are silently ignored without any response.
     * 			
     */
    @WebMethod(operationName = "DeleteCredentialAccessProfiles", action = "http://www.onvif.org/ver10/credential/wsdl/DeleteCredentialAccessProfiles")
    @RequestWrapper(localName = "DeleteCredentialAccessProfiles", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredentialAccessProfiles")
    @ResponseWrapper(localName = "DeleteCredentialAccessProfilesResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredentialAccessProfilesResponse")
    void deleteCredentialAccessProfiles(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken,
            @WebParam(name = "AccessProfileToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    java.util.List<String> accessProfileToken
    );

    /**
     * This method is used to enable a credential.
     * 			
     */
    @WebMethod(operationName = "EnableCredential", action = "http://www.onvif.org/ver10/credential/wsdl/EnableCredential")
    @RequestWrapper(localName = "EnableCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.EnableCredential")
    @ResponseWrapper(localName = "EnableCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.EnableCredentialResponse")
    void enableCredential(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String token,
            @WebParam(name = "Reason", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String reason
    );

    /**
     * This method returns all the credential identifiers for a credential.
     * 			
     */
    @WebMethod(operationName = "GetCredentialIdentifiers", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialIdentifiers")
    @RequestWrapper(localName = "GetCredentialIdentifiers", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialIdentifiers")
    @ResponseWrapper(localName = "GetCredentialIdentifiersResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialIdentifiersResponse")
    @WebResult(name = "CredentialIdentifier", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    java.util.List<us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialIdentifier> getCredentialIdentifiers(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken
    );

    /**
     * This operation add or updates the credential access profiles for a credential.
     * 				The device shall update the credential access profile if the access profile token in the specified
     * 				credential access profile matches. Otherwise the credential access profile is added.
     * 			
     */
    @WebMethod(operationName = "SetCredentialAccessProfiles", action = "http://www.onvif.org/ver10/credential/wsdl/SetCredentialAccessProfiles")
    @RequestWrapper(localName = "SetCredentialAccessProfiles", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredentialAccessProfiles")
    @ResponseWrapper(localName = "SetCredentialAccessProfilesResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredentialAccessProfilesResponse")
    void setCredentialAccessProfiles(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken,
            @WebParam(name = "CredentialAccessProfile", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    java.util.List<us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialAccessProfile> credentialAccessProfile
    );

    /**
     * This operation creates or updates a credential identifier for a credential.
     * 				If the type of specified credential identifier already exists, the current credential identifier of that
     * 				type is replaced. Otherwise the credential identifier is added.
     * 			
     */
    @WebMethod(operationName = "SetCredentialIdentifier", action = "http://www.onvif.org/ver10/credential/wsdl/SetCredentialIdentifier")
    @RequestWrapper(localName = "SetCredentialIdentifier", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredentialIdentifier")
    @ResponseWrapper(localName = "SetCredentialIdentifierResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.SetCredentialIdentifierResponse")
    void setCredentialIdentifier(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken,
            @WebParam(name = "CredentialIdentifier", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialIdentifier credentialIdentifier
    );

    /**
     * This operation requests a list of CredentialInfo items matching the given tokens.
     * The device shall ignore tokens it cannot resolve and shall return an empty list if there are no 
     * items matching the specified tokens. The device shall not return a fault in this case.
     * If the number of requested items is greater than MaxLimit, a TooManyItems fault shall be returned.
     *       
     */
    @WebMethod(operationName = "GetCredentialInfo", action = "http://www.onvif.org/ver10/credential/wsdl/GetCredentialInfo")
    @RequestWrapper(localName = "GetCredentialInfo", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialInfo")
    @ResponseWrapper(localName = "GetCredentialInfoResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.GetCredentialInfoResponse")
    @WebResult(name = "CredentialInfo", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    java.util.List<CredentialInfo> getCredentialInfo(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    java.util.List<String> token
    );

    /**
     * This method deletes the specified credential.
     * If it is associated with one or more entities some devices may not be able to delete the credential, 
     * and consequently a ReferenceInUse fault shall be generated.
     *       
     */
    @WebMethod(operationName = "DeleteCredential", action = "http://www.onvif.org/ver10/credential/wsdl/DeleteCredential")
    @RequestWrapper(localName = "DeleteCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredential")
    @ResponseWrapper(localName = "DeleteCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredentialResponse")
    void deleteCredential(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String token
    );

    /**
     * This operation creates a credential. A call to this method takes a credential structure and a credential
     * 				state structure as input parameters. The credential state can be created in disabled or enabled state.
     * 				The token field of the credential shall be empty, the device shall allocate a token for the credential.
     * 				The allocated token shall be returned in the response. If the client sends any value in the token field,
     * 				the device shall return InvalidArgVal as generic fault code.
     * 			
     */
    @WebMethod(operationName = "CreateCredential", action = "http://www.onvif.org/ver10/credential/wsdl/CreateCredential")
    @RequestWrapper(localName = "CreateCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CreateCredential")
    @ResponseWrapper(localName = "CreateCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CreateCredentialResponse")
    @WebResult(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
    String createCredential(
            @WebParam(name = "Credential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    Credential credential,
            @WebParam(name = "State", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.CredentialState state
    );

    /**
     * This method deletes all the identifier values for the specified type. However, if the identifier type
     * 				name doesn’t exist in the device, it will be silently ignored without any response.
     * 			
     */
    @WebMethod(operationName = "DeleteCredentialIdentifier", action = "http://www.onvif.org/ver10/credential/wsdl/DeleteCredentialIdentifier")
    @RequestWrapper(localName = "DeleteCredentialIdentifier", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredentialIdentifier")
    @ResponseWrapper(localName = "DeleteCredentialIdentifierResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DeleteCredentialIdentifierResponse")
    void deleteCredentialIdentifier(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken,
            @WebParam(name = "CredentialIdentifierTypeName", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialIdentifierTypeName
    );

    /**
     * This method is used to reset anti-passback violations for a specified credential.
     * 			
     */
    @WebMethod(operationName = "ResetAntipassbackViolation", action = "http://www.onvif.org/ver10/credential/wsdl/ResetAntipassbackViolation")
    @RequestWrapper(localName = "ResetAntipassbackViolation", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.ResetAntipassbackViolation")
    @ResponseWrapper(localName = "ResetAntipassbackViolationResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.ResetAntipassbackViolationResponse")
    void resetAntipassbackViolation(
            @WebParam(name = "CredentialToken", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String credentialToken
    );

    /**
     * This operation modifies the specified credential.
     * The token of the credential to modify is specified in the token field of the Credential structure and 
     * shall not be empty. All other fields in the structure shall overwrite the fields in the specified credential.
     * When an existing credential is modified, the state is not modified explicitly. The only way for a client to 
     * change the state of a credential is to explicitly call the EnableCredential, DisableCredential or 
     * ResetAntipassback command.
     * All existing credential identifiers and credential access profiles are removed and replaced with the 
     * specified entities.
     *       
     */
    @WebMethod(operationName = "ModifyCredential", action = "http://www.onvif.org/ver10/credential/wsdl/ModifyCredential")
    @RequestWrapper(localName = "ModifyCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.ModifyCredential")
    @ResponseWrapper(localName = "ModifyCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.ModifyCredentialResponse")
    void modifyCredential(
            @WebParam(name = "Credential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    Credential credential
    );

    /**
     * This method is used to disable a credential.
     * 			
     */
    @WebMethod(operationName = "DisableCredential", action = "http://www.onvif.org/ver10/credential/wsdl/DisableCredential")
    @RequestWrapper(localName = "DisableCredential", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DisableCredential")
    @ResponseWrapper(localName = "DisableCredentialResponse", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl", className = "us.mn.state.dot.tms.server.comm.onvif.generated.onvif.ver10.credential.wsdl.DisableCredentialResponse")
    void disableCredential(
            @WebParam(name = "Token", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String token,
            @WebParam(name = "Reason", targetNamespace = "http://www.onvif.org/ver10/credential/wsdl")
                    String reason
    );
}
